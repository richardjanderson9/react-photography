# Vultr Container Registry CI/CD Workflow
# This workflow builds a Docker image, scans it for vulnerabilities,
# and pushes it to the Vultr Container Registry upon a push to the main branch.

name: Vultr Container Registry CI

on:
  push:
    branches:
      - main

# Prevent multiple workflow runs for the same branch from overlapping.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  build_scan_and_push:
    name: Build, Scan, and Push to Vultr Registry
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîß Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.15.0'
          cache: 'npm'

      - name: üì¶ Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: üèóÔ∏è Install Dependencies & Build App
        run: |
          npm ci
          npm run lint || echo "::warning::Linting issues found, but continuing."
          NODE_ENV=production npm run build

      # Suggested Update: Add a testing step
      # - name: üß™ Run Tests
      #   run: npm test
      #   # Add 'continue-on-error: true' if you want the workflow to proceed
      #   # even if tests fail, but it's generally recommended to fail the build.

      - name: üìã Generate Image Tags
        id: meta
        run: |
          TAGS="${{ secrets.VULTR_REGISTRY }}/react-photography:latest,${{ secrets.VULTR_REGISTRY }}/react-photography:${GITHUB_SHA::7}"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container # This specifies the container driver for Buildx

      - name: üî® Build Image for Scanning (Single Platform)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          outputs: type=docker,dest=./image.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üîí Scan Image for Vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@0.24.0
        with:
          input: ./image.tar
          format: 'table'
          exit-code: '1' # This will make the step fail if critical/high vulnerabilities are found
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        # Suggested Update: Removed 'continue-on-error: true'
        # By removing 'continue-on-error: true', the workflow will now fail if Trivy finds
        # vulnerabilities with CRITICAL or HIGH severity, improving security posture.

      - name: üïµÔ∏è Verify Docker image tarball
        run: |
          if [ ! -f ./image.tar ]; then
            echo "‚ùå image.tar not found!"
            exit 1
          fi

      - name: üîì Login to Vultr Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.VULTR_REGISTRY }}
          username: ${{ secrets.VULTR_USER }}
          password: ${{ secrets.VULTR_API_KEY }}

      - name: üöÄ Build and Push Multi-Platform Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max